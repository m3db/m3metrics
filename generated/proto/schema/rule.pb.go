// Copyright (c) 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

// Code generated by protoc-gen-go.
// source: rule.proto
// DO NOT EDIT!

package schema

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type MappingRuleSnapshot struct {
	Name          string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Tombstoned    bool              `protobuf:"varint,2,opt,name=tombstoned" json:"tombstoned,omitempty"`
	CutoverTime   int64             `protobuf:"varint,3,opt,name=cutover_time,json=cutoverTime" json:"cutover_time,omitempty"`
	TagFilters    map[string]string `protobuf:"bytes,4,rep,name=tag_filters,json=tagFilters" json:"tag_filters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Policies      []*Policy         `protobuf:"bytes,5,rep,name=policies" json:"policies,omitempty"`
	LastUpdatedAt int64             `protobuf:"varint,6,opt,name=last_updated_at,json=lastUpdatedAt" json:"last_updated_at,omitempty"`
	LastUpdatedBy string            `protobuf:"bytes,7,opt,name=last_updated_by,json=lastUpdatedBy" json:"last_updated_by,omitempty"`
}

func (m *MappingRuleSnapshot) Reset()                    { *m = MappingRuleSnapshot{} }
func (m *MappingRuleSnapshot) String() string            { return proto.CompactTextString(m) }
func (*MappingRuleSnapshot) ProtoMessage()               {}
func (*MappingRuleSnapshot) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *MappingRuleSnapshot) GetTagFilters() map[string]string {
	if m != nil {
		return m.TagFilters
	}
	return nil
}

func (m *MappingRuleSnapshot) GetPolicies() []*Policy {
	if m != nil {
		return m.Policies
	}
	return nil
}

type MappingRule struct {
	Uuid      string                 `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
	Snapshots []*MappingRuleSnapshot `protobuf:"bytes,2,rep,name=snapshots" json:"snapshots,omitempty"`
}

func (m *MappingRule) Reset()                    { *m = MappingRule{} }
func (m *MappingRule) String() string            { return proto.CompactTextString(m) }
func (*MappingRule) ProtoMessage()               {}
func (*MappingRule) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

func (m *MappingRule) GetSnapshots() []*MappingRuleSnapshot {
	if m != nil {
		return m.Snapshots
	}
	return nil
}

type RollupTarget struct {
	Name     string    `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Tags     []string  `protobuf:"bytes,2,rep,name=tags" json:"tags,omitempty"`
	Policies []*Policy `protobuf:"bytes,3,rep,name=policies" json:"policies,omitempty"`
}

func (m *RollupTarget) Reset()                    { *m = RollupTarget{} }
func (m *RollupTarget) String() string            { return proto.CompactTextString(m) }
func (*RollupTarget) ProtoMessage()               {}
func (*RollupTarget) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{2} }

func (m *RollupTarget) GetPolicies() []*Policy {
	if m != nil {
		return m.Policies
	}
	return nil
}

type RollupRuleSnapshot struct {
	Name          string            `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Tombstoned    bool              `protobuf:"varint,2,opt,name=tombstoned" json:"tombstoned,omitempty"`
	CutoverTime   int64             `protobuf:"varint,3,opt,name=cutover_time,json=cutoverTime" json:"cutover_time,omitempty"`
	TagFilters    map[string]string `protobuf:"bytes,4,rep,name=tag_filters,json=tagFilters" json:"tag_filters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Targets       []*RollupTarget   `protobuf:"bytes,5,rep,name=targets" json:"targets,omitempty"`
	LastUpdatedAt int64             `protobuf:"varint,6,opt,name=last_updated_at,json=lastUpdatedAt" json:"last_updated_at,omitempty"`
	LastUpdatedBy string            `protobuf:"bytes,7,opt,name=last_updated_by,json=lastUpdatedBy" json:"last_updated_by,omitempty"`
}

func (m *RollupRuleSnapshot) Reset()                    { *m = RollupRuleSnapshot{} }
func (m *RollupRuleSnapshot) String() string            { return proto.CompactTextString(m) }
func (*RollupRuleSnapshot) ProtoMessage()               {}
func (*RollupRuleSnapshot) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{3} }

func (m *RollupRuleSnapshot) GetTagFilters() map[string]string {
	if m != nil {
		return m.TagFilters
	}
	return nil
}

func (m *RollupRuleSnapshot) GetTargets() []*RollupTarget {
	if m != nil {
		return m.Targets
	}
	return nil
}

type RollupRule struct {
	Uuid      string                `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
	Snapshots []*RollupRuleSnapshot `protobuf:"bytes,2,rep,name=snapshots" json:"snapshots,omitempty"`
}

func (m *RollupRule) Reset()                    { *m = RollupRule{} }
func (m *RollupRule) String() string            { return proto.CompactTextString(m) }
func (*RollupRule) ProtoMessage()               {}
func (*RollupRule) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{4} }

func (m *RollupRule) GetSnapshots() []*RollupRuleSnapshot {
	if m != nil {
		return m.Snapshots
	}
	return nil
}

type RuleSet struct {
	Uuid          string         `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
	Namespace     string         `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	CreatedAt     int64          `protobuf:"varint,3,opt,name=created_at,json=createdAt" json:"created_at,omitempty"`
	LastUpdatedAt int64          `protobuf:"varint,4,opt,name=last_updated_at,json=lastUpdatedAt" json:"last_updated_at,omitempty"`
	Tombstoned    bool           `protobuf:"varint,5,opt,name=tombstoned" json:"tombstoned,omitempty"`
	CutoverTime   int64          `protobuf:"varint,6,opt,name=cutover_time,json=cutoverTime" json:"cutover_time,omitempty"`
	MappingRules  []*MappingRule `protobuf:"bytes,7,rep,name=mapping_rules,json=mappingRules" json:"mapping_rules,omitempty"`
	RollupRules   []*RollupRule  `protobuf:"bytes,8,rep,name=rollup_rules,json=rollupRules" json:"rollup_rules,omitempty"`
	LastUpdatedBy string         `protobuf:"bytes,9,opt,name=last_updated_by,json=lastUpdatedBy" json:"last_updated_by,omitempty"`
}

func (m *RuleSet) Reset()                    { *m = RuleSet{} }
func (m *RuleSet) String() string            { return proto.CompactTextString(m) }
func (*RuleSet) ProtoMessage()               {}
func (*RuleSet) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{5} }

func (m *RuleSet) GetMappingRules() []*MappingRule {
	if m != nil {
		return m.MappingRules
	}
	return nil
}

func (m *RuleSet) GetRollupRules() []*RollupRule {
	if m != nil {
		return m.RollupRules
	}
	return nil
}

func init() {
	proto.RegisterType((*MappingRuleSnapshot)(nil), "schema.MappingRuleSnapshot")
	proto.RegisterType((*MappingRule)(nil), "schema.MappingRule")
	proto.RegisterType((*RollupTarget)(nil), "schema.RollupTarget")
	proto.RegisterType((*RollupRuleSnapshot)(nil), "schema.RollupRuleSnapshot")
	proto.RegisterType((*RollupRule)(nil), "schema.RollupRule")
	proto.RegisterType((*RuleSet)(nil), "schema.RuleSet")
}

func init() { proto.RegisterFile("rule.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 506 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x94, 0x4b, 0x8b, 0xd4, 0x40,
	0x10, 0xc7, 0x49, 0x32, 0xaf, 0x54, 0xb2, 0xae, 0xf4, 0xee, 0xa1, 0x19, 0x1f, 0x8c, 0x73, 0x90,
	0x61, 0x85, 0x1c, 0x14, 0x61, 0x14, 0x3c, 0x28, 0xe8, 0x45, 0x05, 0x69, 0xc7, 0x8b, 0x08, 0xa1,
	0x27, 0xd3, 0x66, 0x83, 0x79, 0xd1, 0xdd, 0x59, 0xc8, 0x97, 0xf5, 0x5b, 0x88, 0x57, 0x49, 0x77,
	0x32, 0x93, 0x31, 0xed, 0x78, 0x13, 0x6f, 0x95, 0x7f, 0x2a, 0x95, 0xaa, 0x5f, 0xfd, 0xbb, 0x01,
	0x78, 0x95, 0xb2, 0xa0, 0xe4, 0x85, 0x2c, 0xd0, 0x44, 0x44, 0xd7, 0x2c, 0xa3, 0x73, 0xbf, 0x2c,
	0xd2, 0x24, 0xaa, 0xb5, 0xba, 0xfc, 0x61, 0xc3, 0xc5, 0x7b, 0x5a, 0x96, 0x49, 0x1e, 0x93, 0x2a,
	0x65, 0x1f, 0x73, 0x5a, 0x8a, 0xeb, 0x42, 0x22, 0x04, 0xa3, 0x9c, 0x66, 0x0c, 0x5b, 0x0b, 0x6b,
	0xe5, 0x12, 0x15, 0xa3, 0xfb, 0x00, 0xb2, 0xc8, 0xb6, 0x42, 0x16, 0x39, 0xdb, 0x61, 0x7b, 0x61,
	0xad, 0x66, 0xa4, 0xa7, 0xa0, 0x07, 0xe0, 0x47, 0x95, 0x2c, 0x6e, 0x18, 0x0f, 0x65, 0x92, 0x31,
	0xec, 0x2c, 0xac, 0x95, 0x43, 0xbc, 0x56, 0xdb, 0x24, 0x19, 0x43, 0xef, 0xc0, 0x93, 0x34, 0x0e,
	0xbf, 0x26, 0xa9, 0x64, 0x5c, 0xe0, 0xd1, 0xc2, 0x59, 0x79, 0x8f, 0x1f, 0x05, 0xba, 0xb5, 0xc0,
	0xd0, 0x48, 0xb0, 0xa1, 0xf1, 0x1b, 0x9d, 0xfd, 0x3a, 0x97, 0xbc, 0x26, 0x20, 0xf7, 0x02, 0xba,
	0x82, 0x99, 0x1a, 0x26, 0x61, 0x02, 0x8f, 0x55, 0xa9, 0x5b, 0x5d, 0xa9, 0x0f, 0x6a, 0x48, 0xb2,
	0x7f, 0x8f, 0x1e, 0xc2, 0x79, 0x4a, 0x85, 0x0c, 0xab, 0x72, 0x47, 0x25, 0xdb, 0x85, 0x54, 0xe2,
	0x89, 0xea, 0xef, 0xac, 0x91, 0x3f, 0x69, 0xf5, 0xa5, 0x1c, 0xe4, 0x6d, 0x6b, 0x3c, 0x55, 0x0c,
	0xfa, 0x79, 0xaf, 0xea, 0xf9, 0x0b, 0x38, 0xff, 0xad, 0x35, 0x74, 0x1b, 0x9c, 0x6f, 0xac, 0x6e,
	0x91, 0x35, 0x21, 0xba, 0x84, 0xf1, 0x0d, 0x4d, 0x2b, 0xa6, 0x60, 0xb9, 0x44, 0x3f, 0x3c, 0xb7,
	0xd7, 0xd6, 0xf2, 0x0b, 0x78, 0xbd, 0x69, 0x1b, 0xdc, 0x55, 0x95, 0xec, 0x3a, 0xdc, 0x4d, 0x8c,
	0x9e, 0x81, 0x2b, 0x5a, 0x0a, 0x02, 0xdb, 0x6a, 0xbc, 0x3b, 0x27, 0x48, 0x91, 0x43, 0xf6, 0x72,
	0x0b, 0x3e, 0x29, 0xd2, 0xb4, 0x2a, 0x37, 0x94, 0xc7, 0xcc, 0xbc, 0x4d, 0x04, 0x23, 0x49, 0x63,
	0x5d, 0xd9, 0x25, 0x2a, 0x3e, 0x02, 0xea, 0x9c, 0x06, 0xba, 0xfc, 0x69, 0x03, 0xd2, 0x3f, 0xf9,
	0x17, 0xc6, 0x79, 0x6b, 0x32, 0xce, 0x55, 0xd7, 0xdc, 0xb0, 0x8f, 0x93, 0xbe, 0x09, 0x60, 0x2a,
	0x15, 0x98, 0xce, 0x36, 0x97, 0xc7, 0x85, 0x34, 0x35, 0xd2, 0x25, 0xfd, 0x6f, 0xde, 0xf9, 0x0c,
	0x70, 0x18, 0xd8, 0x68, 0x9d, 0xf5, 0xd0, 0x3a, 0xf3, 0x3f, 0xb3, 0xea, 0x3b, 0xe7, 0xbb, 0x0d,
	0x53, 0xf5, 0x4e, 0xbb, 0x66, 0x50, 0xf9, 0x2e, 0xb8, 0xcd, 0x4a, 0x45, 0x49, 0xa3, 0xae, 0xb3,
	0x83, 0x80, 0xee, 0x01, 0x44, 0x9c, 0x75, 0x8c, 0xf4, 0x1a, 0xdd, 0x56, 0x31, 0xf0, 0xa1, 0x12,
	0x8f, 0x4c, 0x1c, 0x8f, 0xfd, 0x32, 0xfe, 0xab, 0x5f, 0x26, 0x43, 0xbf, 0xac, 0xe1, 0x2c, 0xd3,
	0x67, 0x24, 0x6c, 0xee, 0x40, 0x81, 0xa7, 0x8a, 0xc2, 0x85, 0xe1, 0x00, 0x11, 0x3f, 0x3b, 0x3c,
	0x08, 0xf4, 0x14, 0x7c, 0xae, 0x10, 0xb5, 0x1f, 0xce, 0xd4, 0x87, 0x68, 0x88, 0x8f, 0x78, 0x7c,
	0x1f, 0x0b, 0xd3, 0xee, 0x5d, 0xc3, 0xee, 0xb7, 0x13, 0x75, 0xef, 0x3e, 0xf9, 0x15, 0x00, 0x00,
	0xff, 0xff, 0x25, 0xce, 0x96, 0xaa, 0x9b, 0x05, 0x00, 0x00,
}
