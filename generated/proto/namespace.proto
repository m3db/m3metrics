// Copyright (c) 2017 Uber Technologies, Inc.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

syntax = "proto3";
package schema;

<<<<<<< HEAD:generated/proto/namespace.proto
message NamespaceSnapshot {
  int32 for_ruleset_version = 1;
  bool tombstoned = 2;
}

message Namespace {
  string name = 1;
  repeated NamespaceSnapshot snapshots = 2;
}

message Namespaces {
  repeated Namespace namespaces = 1;
=======
import (
	"fmt"
	"time"

	"github.com/m3db/m3cluster/kv"
	"github.com/m3db/m3metrics/rules"
)

var (
	errEmptyNamespace = fmt.Errorf("cannot generate ruleset key with empty namespace")
)

// HandlerOptions holds common settings to all handlers.
type HandlerOptions struct {
	PropagationDelay time.Duration
	NamespacesKey    string
	RuleSetKeyFmt    string
}

// Handler is a struct that all functionality should be defined on.
type Handler struct {
	store kv.TxnStore
	opts  HandlerOptions
}

// NewHandlerOpts creates a new HanlderOptions struct.
func NewHandlerOpts(propDelay time.Duration, namespacesKey string, rulesetKeyFmt string) HandlerOptions {
	return HandlerOptions{propDelay, namespacesKey, rulesetKeyFmt}
}

// NewHandler creates a new Handler.
func NewHandler(store kv.TxnStore, opts HandlerOptions) Handler {
	return Handler{store: store, opts: opts}
>>>>>>> Bump glide yaml:handlers/handler.go
}

// RuleSetKey generates a ruleset key for a given namespace
func (h Handler) RuleSetKey(ns string) string {
	return fmt.Sprintf(h.opts.RuleSetKeyFmt, ns)
}

// Persist saves the given ruleset and optional namespace to the backing store.
// If saveNamespace is false, will only use the namesapces state to ensure that
// the RuleSet is still valid.
func (h *Handler) Persist(
	rs rules.RuleSet,
	nss *rules.Namespaces,
	saveNamespace bool,
) error {
	ruleSetVersion := rs.Version()
	nssVersion := nss.Version()

	ruleSetKey := h.RuleSetKey(string(rs.Namespace()))

	namespacesKey := h.opts.NamespacesKey
	rsSchema, err := rs.Schema()
	if err != nil {
		return err
	}

	namespacesCond := kv.NewCondition().
		SetKey(namespacesKey).
		SetCompareType(kv.CompareEqual).
		SetTargetType(kv.TargetVersion).
		SetValue(nssVersion)

	ruleSetCond := kv.NewCondition().
		SetKey(ruleSetKey).
		SetCompareType(kv.CompareEqual).
		SetTargetType(kv.TargetVersion).
		SetValue(ruleSetVersion)

	conditions := []kv.Condition{
		namespacesCond,
		ruleSetCond,
	}

	ops := []kv.Op{
		kv.NewSetOp(ruleSetKey, rsSchema),
	}
	if saveNamespace {
		nssSchema, err := nss.Schema()
		if err != nil {
			return err
		}
		ops = append(ops, kv.NewSetOp(namespacesKey, nssSchema))
	}

	if _, err := h.store.Commit(conditions, ops); err != nil {
		return err
	}

	return nil
}
